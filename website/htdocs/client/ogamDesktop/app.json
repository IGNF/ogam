{
    /**
     * The toolkit to use. Select either "classic" or "modern".
     */
    "toolkit": "classic",

    /**
     * The application's namespace.
     */
    "name": "OgamDesktop",

    /**
     * The relative path to the appliaction's markup file (html, jsp, asp, etc.)
     */
    "indexHtmlPath": "index.html",

    /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be available in your class "requires" or in calls
     * to "Ext.require". The "app.dir" variable below is expanded to the path where the
     * application resides (the same folder in which this file is located).
     */
    "classpath": ["${app.dir}/app",
	    "${app.dir}/../packages/remote/GeoExt/src/component",
        "${app.dir}/../packages/remote/GeoExt/src/data",
        "${app.dir}/../packages/remote/GeoExt/src/mixin",
        "${app.dir}/../packages/remote/GeoExt/src/util"
    ],

    "overrides": "${app.dir}/overrides,${app.dir}/locale/${app.locale}",

    /**
     * The Sencha Framework for this application: "ext" or "touch".
     */
    "framework": "ext",

    /**
     * The name of the theme for this application.
     */
    //"theme": "ogamDesktop-theme",
    "theme": "theme-gray",
    
    /**
     * The list of required packages (with optional versions; default is "latest").
     *
     * For example,
     *
     *      "requires": [
     *          "sencha-charts"
     *      ]
     */
    "requires": [
		"locale","ux"
    ],

	"locale": "fr",

    /**
     * Sass configuration properties.
     */
    "sass": {
        /**
         * The root namespace to use when mapping *.scss files to classes in the
         * sass/src and sass/var directories. For example, "OgamDesktop.view.Foo" would
         * map to "sass/src/view/Foo.scss". If we changed this to "OgamDesktop.view" then
         * it would map to "sass/src/Foo.scss". To style classes outside the app's
         * root namespace, change this to "". Doing so would change the mapping of
         * "OgamDesktop.view.Foo" to "sass/src/OgamDesktop/view/Foo.scss".
         */
        "namespace": "OgamDesktop",
		
		/**
		 * Comma-separated list of files or folders containing extra Sass. These
		 * files are automatically included in the Sass compilation. By default this
		 * is just "etc/all.scss" to allow import directives to control the order
		 * other files are included.
		 *
		 * All "etc" files are included at the top of the Sass compilation in their
		 * dependency order:
		 *
		 *      +-------+---------+
		 *      |       | base    |
		 *      | theme +---------+
		 *      |       | derived |
		 *      +-------+---------+
		 *      | packages        |  (in package dependency order)
		 *      +-----------------+
		 *      | application     |
		 *      +-----------------+
		 */
		"etc": [
			"sass/etc/all.scss",
			"${toolkit.name}/sass/etc/all.scss"
		],

		/**
		 * Comma-separated list of folders containing Sass variable definitions
		 * files. These file can also define Sass mixins for use by components.
		 *
		 * All "var" files are included after "etc" files in the Sass compilation in
		 * dependency order:
		 *
		 *      +-------+---------+
		 *      |       | base    |
		 *      | theme +---------+
		 *      |       | derived |
		 *      +-------+---------+
		 *      | packages        |  (in package dependency order)
		 *      +-----------------+
		 *      | application     |
		 *      +-----------------+
		 *
		 * The "sass/var/all.scss" file is always included at the start of the var
		 * block before any files associated with JavaScript classes.
		 */
		"var": [
			"sass/var/all.scss",
			"sass/var",
			"${toolkit.name}/sass/var"
		],

		/**
		 * Comma-separated list of folders containing Sass rule files.
		 *
		 * All "src" files are included after "var" files in the Sass compilation in
		 * dependency order (the same order as "etc"):
		 *
		 *      +-------+---------+
		 *      |       | base    |
		 *      | theme +---------+
		 *      |       | derived |
		 *      +-------+---------+
		 *      | packages        |  (in package dependency order)
		 *      +-----------------+
		 *      | application     |
		 *      +-----------------+
		 */
		"src": [
			"sass/src",
			"${toolkit.name}/sass/src"
		]

		/**
		 * File used to save sass variables edited via Sencha Inspector. This file
		 * content will override all other variables.
		 */
		// "save": "sass/save.scss"
    },

    /**
     * List of all JavaScript assets in the right execution order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/script.js",   // REQUIRED
     *
     *          // Set to true on one file to indicate that it should become the container
     *          // for the concatenated classes.
     *          //
     *          "bundle": false,    // OPTIONAL
     *
     *          // Set to true to include this file in the concatenated classes.
     *          //
     *          "includeInBundle": false,  // OPTIONAL
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": "",        // OPTIONAL
     *
     *          // A value of true indicates that is a development mode only dependency.
     *          // These files will not be copied into the build directory or referenced
     *          // in the generate app.json manifest for the micro loader.
     *          //
     *          "bootstrap": false   // OPTIONAL
     *      }
     *
     */
    "js": [
        {
            "path": "http://localhost:8000/map/get-map-parameters",
            "remote": true
        },{
            "path": "lib/OpenLayers/ol-debug.js"
            //"path": "lib/OpenLayers/ol.js"
        },{
            "path": "lib/OpenLayers/Scalecontrol.js"
        },{
            "path": "lib/addon/OpenLayers/Control/FeatureInfoControl.js",
            "includeInBundle": true
        },{
            "path": "lib/addon/OpenLayers/Handler/FeatureInfo.js",
            "includeInBundle": true
        },{
            "path": "lib/addon/OpenLayers/Control/GetFeatureControl.js",
            "includeInBundle": true
        },{
            "path": "lib/addon/OpenLayers/Handler/GetFeature.js",
            "includeInBundle": true
        },{
            "path": "lib/addon/OpenLayers/Control/LocationInfoControl.js",
            "includeInBundle": true
        },{
            "path": "lib/addon/OpenLayers/Handler/LocationInfo.js",
            "includeInBundle": true
        },{
            "path": "lib/addon/OpenLayers/Control/ZoomToFeatures.js",
            "includeInBundle": true
        },{
            "path": "app.js",
            "bundle": true
        }
    ],

    /**
     * List of all CSS assets in the right inclusion order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/stylesheet.css",   // REQUIRED
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": ""      // OPTIONAL
     *      }
     */
    "css": [
        {
            "path": "lib/OpenLayers/ol.css"
        },{
            "path": "bootstrap.css",
            "bootstrap": true
        }
    ],

    /**
     * This option is used to configure the dynamic loader. At present these options
     * are supported.
     *
     *      "loader": {
     *          // This property controls how the loader manages caching for requests:
     *          //
     *          //   - true: allows requests to receive cached responses
     *          //   - false: disable cached responses by adding a random "cache buster"
     *          //   - other: a string (such as the build.timestamp shown here) to allow
     *          //     requests to be cached for this build.
     *          //
     *          "cache": "${build.timestamp}",
     *
     *          // When "cache" is not true, this value is the request parameter used
     *          // to control caching.
     *          //
     *          "cacheParam": "_dc"
     *      },
     *
     */

    "OgamDesktop": {
    	"requestServiceUrl": "../query/",
    	"mapServiceUrl": "../map/",
    	"editionServiceUrl": "../dataedition/",
    	"OpenLayers": {
    		"theme":  "lib/OpenLayers/theme/default/style.css", // Tell OpenLayers where the css default theme is
    		"imgPath":  "lib/OpenLayers/img/" // Tell OpenLayers where the control images are (remember the trailing slash)
    	}
    },

    /**
     * override objects for setting build environment specific 
     * settings.
     */
    "production": {
		"output": {
        	"base": "${workspace.dir}/../public/${app.name}"
    	}
    },
    
    "testing": {
    },
    
    "development": {
        "OgamDesktop": {
            "requestServiceUrl": "http://localhost:8000/query/",
            "mapServiceUrl": "http://localhost:8000/map/",
            "editionServiceUrl": "http://localhost:8000/dataedition/"
	    }
    },

    /**
     *  Controls the output structure of bootstrap artifacts.  May be specified by a string:
     *
     *      "bootstrap": "${app.dir}"
     *
     *  to adjust the base path for all bootstrap objects, or expanded into object form:
     *
     *      "bootstrap": {
     *          "base": "${app.dir},
     *          "manifest": "bootstrap.json",
     *          "microloader": "bootstrap.js",
     *          "css": "bootstrap.css"
     *      }
     *
     *  You can optionally exclude entries from the manifest. If you use ext-*.js,
     *  be sure to exclude "loadOrder" like so:
     *
     *      "bootstrap": {
     *          "manifest": {
     *              "path": "bootstrap.json",
     *              "exclude": "loadOrder"
     *          }
     *      }
     *
     */
    "bootstrap": {
        "base": "${app.dir}",
        "manifest": "bootstrap.json",
        "microloader": "bootstrap.js",
        "css": "bootstrap.css"
    },

    /**
     *  Controls the output directory for build resources.  May be set with
     *  either a string:
     *
     *      "${workspace.build.dir}/${build.environment}/${app.name}"
     *
     *  or an object containing values for various types of
     *  build artifacts:
     *
     *      {
     *          "base": "${workspace.build.dir}/${build.environment}/${app.name}",
     *          "page": {
     *              "path": "../index.html",
     *              "enable": false
     *          },
     *          "css": "${app.output.resources}/${app.name}-all.css",
     *          "js": "app.js",
     *          "microloader": {
     *              "path": "microloader.js",
     *              "embed": true,
     *              "enable": true
     *          },
     *          "manifest": {
     *              "path": "app.json",
     *              "embed": false,
     *              "enable": "${app.output.microloader.enable}"
     *          },
     *          "resources": "resources",
     *          "slicer": {
     *              "path": "${app.output.resources}/images",
     *              "enable": false
     *          }
     *      }
     *
     */
    "output": {
        "base": "${workspace.build.dir}/${build.environment}/${app.name}"
    },

    /**
     * Used to automatically generate cache.manifest (HTML 5 application cache manifest) file when you build
     */
    "appCache": {
        /**
         * List of items in the CACHE MANIFEST section
         */
        "cache": [
         //   "index.html"
        ],
        /**
         * List of items in the NETWORK section
         */
        "network": [
            "*"
        ],
        /**
         * List of items in the FALLBACK section
         */
        "fallback": []
    },

    /**
     * Extra resources to be copied along when build
     */
    "resources": [
		"resources/images"
    ],

    /**
     * File / directory name matchers to ignore when copying to the builds, must be valid regular expressions
     */
    "ignore": [
        "^\\.svn$",
        "^\\.git$"
    ],

    /**
     * Directory path to store all previous production builds. Note that the content generated inside this directory
     * must be kept intact for proper generation of deltas between updates
     */
    "archivePath": "archive",

    /**
     * Additional resources used during theme slicing operations
     */
    "slicer": {
        "js": [
            {
                "path": "${app.dir}/sass/example/custom.js",
                "isWidgetManifest": true
            }
        ]
    },

    /**
     * Uniquely generated id for this application, used as prefix for localStorage keys.
     * Normally you should never change this value.
     */
    "id": "4b4be7f8-ef32-4eec-80b5-3dbe519d0252"
}
