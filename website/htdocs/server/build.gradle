// Install Composer
task installComposer(type:Exec, description: 'Download and install Composer.') {
  workingDir './ogamServer'
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  	commandLine "cmd", "/c php -r \"readfile('https://getcomposer.org/installer');\" | php"
  } else {
  	commandLine "bash", "-c", "php -r \"readfile('https://getcomposer.org/installer');\" | php" 
  }
}


// Install Libraries
task installLibraries(type:Exec, description: 'Download and install Librairies needed for the project using Composer.') {
  workingDir './ogamServer'
  commandLine "php" 
  args "composer.phar", "install"
} 



// Launch PHPDocumentor
task phpdoc(type:Exec, description: 'Launch PHPDoc for documentation generation.') {
  workingDir '.'
  
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  	commandLine './ogamServer/vendor/phpdocumentor/phpdocumentor/bin/phpdoc.bat'
  } else {
  	commandLine './ogamServer/vendor/bin/phpdoc'
  }
  args "-d", "./ogamServer/", "-t", "./build/docs/", '--template=responsive-twig'
}

// Launch PHPCheckstyle
task phpcheckstyle(type:Exec, description: 'Launch PHPCHeckstyle for static analysis.') {
  workingDir '.'
  commandLine "php" 
  args "./ogamServer/vendor/phpcheckstyle/phpcheckstyle/run.php", "--src", "./ogamServer/src/", "--outdir", "./build/reports/checkstyle_result/", "--config", "../../config/checkstyle_ogam.cfg.xml", "--format", "xml,html", "--linecount"
}



// Launch PHPUnit
task phpunit(type:Exec, description: 'Launch PHPUnit for unit testing.') {
  workingDir 'ogamServer/'
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  	commandLine "cmd", "/c", "php ./vendor/phpunit/phpunit/phpunit"
  } else {
  	commandLine './vendor/phpunit/phpunit/phpunit'
  }
  args "--configuration", "./phpunit.xml"
}

// Clean the deploy directory
task cleanDeploy(type: Delete, description: 'Clean the deploy directory.') {

	def deployDir = project.hasProperty('deployDir') ? project.getProperty('deployDir') : 'build/deploy'

	delete "${deployDir}"
}


// Copy the PHP application files to the deploy directory
task deploy(type: Copy, description: 'Copy the PHP files to the deploy directory.') {

	// On CI server, $deployDir = /var/www/html
	def deployDir = project.hasProperty('deployDir') ? project.getProperty('deployDir') : 'build/deploy'

	// recopie de l'application
    from 'ogamServer'     
    into "${deployDir}/server/ogamServer"    
    exclude "**/var/cache/**"
    exclude "**/var/logs/**"
    exclude "**/var/sessions/**"
    exclude "**/var/upload/**"
            
    doLast {
    	println "The server file have been deployed to ${deployDir}/server/ogamServer"
    }
}



//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens


// Copy the PHP application files to the deploy directory
task setBuildNumber(type: Copy, description: 'Update the build number.', dependsOn: 'deploy') {

	// On CI server, $deployDir = /var/www/html
	def deployDir = project.hasProperty('deployDir') ? project.getProperty('deployDir') : 'build/deploy'

	// Incrémentation du numéro de build
	ant.buildnumber()

	// recopie de l'application
    from 'ogamServer'     
    into "${deployDir}/server/ogamServer"    
    include "**/base.html.twig"
    
    
    eachFile {
		filter(ReplaceTokens, tokens: ['version_number': project.version, 'build_number': ant.antProject.properties['build.number']])
	}	
        
    doLast {
    	println "Base template updated with build number"
    }
}


// Clear cache
//
// Console command does not work correctly
// cf : https://github.com/symfony/symfony/issues/2600
//
// task clearCache(type:Exec, description: 'Clear symfony cache.') {
//    workingDir './ogamServer'
//    commandLine "php" 
//    args "app/console", "cache:clear", "--env=prod"
//} 

task clearCache(type: Delete, description: 'Clear symfony cache.') {
    def dirName = "ogamServer/app/cache"
    delete fileTree('dirName')
} 


// install assets
task installAssets(type:Exec, description: 'Install assets.') {
  workingDir './ogamServer'
  commandLine "php" 
  args "app/console", "assets:install", "--env=prod", "--no-debug"
} 

// update assets links
task asseticDump(type:Exec, description: 'Assetic dump.') {
  workingDir './ogamServer'
  commandLine "php" 
  args "app/console", "assetic:dump", "--env=prod", "--no-debug"
} 


// Build the application
task buildAll(description: 'Build the application.', dependsOn: [clearCache, asseticDump, installAssets]) {

}
