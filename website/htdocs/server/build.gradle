// Install Composer
task installComposer(type:Exec, description: 'Download and install Composer.') {
  workingDir '.'
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  	commandLine "cmd", "/c php -r \"readfile('https://getcomposer.org/installer');\" | php"
  } else {
  	commandLine "bash", "-c", "php -r \"readfile('https://getcomposer.org/installer');\" | php" 
  }
}


// Install Libraries
task installLibraries(type:Exec, description: 'Download and install Librairies needed for the project using Composer.') {
  workingDir '.'
  commandLine "php" 
  args "composer.phar", "install"
} 



// Launch PHPDocumentor
task phpdoc(type:Exec, description: 'Launch PHPDoc for documentation generation.') {
  workingDir '.'
  
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  	commandLine './vendor/phpdocumentor/phpdocumentor/bin/phpdoc.bat'
  } else {
  	commandLine './vendor/bin/phpdoc'
  }
  args "-d", "./ogamServer/app/", "-t", "./build/docs/", '--template=responsive-twig'
}

// Launch PHPCheckstyle
task phpcheckstyle(type:Exec, description: 'Launch PHPCHeckstyle for static analysis.') {
  workingDir '.'
  commandLine "php" 
  args "./vendor/phpcheckstyle/phpcheckstyle/run.php", "--src", "./ogamServer/app/", "--outdir", "./build/reports/checkstyle_result/", "--config", "../../config/checkstyle_ogam.cfg.xml", "--format", "xml,html", "--linecount"
}



// Launch PHPUnit
task phpunit(type:Exec, description: 'Launch PHPUnit for unit testing.') {
  workingDir '.'
  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
  	commandLine "cmd", "/c", "php ./vendor/phpunit/phpunit/phpunit"
  } else {
  	commandLine './vendor/phpunit/phpunit/phpunit'
  }
  args "--configuration", "./test/phpunit.xml"
}

// Clean the deploy directory
task cleanDeploy(type: Delete, description: 'Clean the deploy directory.') {

	def deployDir = project.hasProperty('deployDir') ? project.getProperty('deployDir') : 'build/deploy'

	delete "${deployDir}"
}


//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens


// Copy the PHP files to the deploy directory
task deploy(type: Copy, dependsOn: cleanDeploy, description: 'Copy the PHP files to the deploy directory.') {

	def deployDir = project.hasProperty('deployDir') ? project.getProperty('deployDir') : 'build/deploy'

	ant.buildnumber()

    from 'ogamServer' 
    
    into "${deployDir}"
    
    exclude 'sessions/*'
    exclude 'tmp/*'
    exclude 'upload/*' 
    exclude 'app/configs/*'       
    
    eachFile {
		filter(ReplaceTokens, tokens: ['version_number': project.version, 'build_number': ant.antProject.properties['build.number']])
	}
        
    doLast {
    	println "The server file have been deployed to ${deployDir}"
    }
}
