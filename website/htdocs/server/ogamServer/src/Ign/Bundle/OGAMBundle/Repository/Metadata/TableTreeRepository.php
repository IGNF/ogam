<?php
namespace Ign\Bundle\OGAMBundle\Repository\Metadata;

use Ign\Bundle\OGAMBundle\Entity\Metadata\TableFormat;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * TableTreeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TableTreeRepository extends \Doctrine\ORM\EntityRepository {

	/**
	 * Get the ancestors of the table format in the table tree.
	 *
	 * @param String $tableFormat
	 *        	the table format
	 * @param String $schemaCode
	 *        	the name of the schema
	 * @return Array[Application_Object_Metadata_TableTreeData]
	 * @throws Exception if the table is not found
	 */
	// Was called getTablesTree in zend version
	public function getAncestors($tableFormat, $schemaCode) {
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata($this->_entityName, 't');
		
		$ancestors = array();
		
		// The extra columns can be found with $tableTreeData->getTableFormat();
		$sql = " SELECT schema_code, child_table, parent_table, join_key "; // , tf.table_name, tf.primary_key ";
		$sql .= " FROM table_tree ";
		// $sql .= " LEFT JOIN table_format tf on (child_table = tf.format) ";
		$sql .= " WHERE child_table = ? ";
		$sql .= " AND table_tree.schema_code = ?";
		
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query->setParameters(array(
			$tableFormat,
			$schemaCode
		));
		
		$result = $query->getResult();
		
		if (empty($result)) {
			throw new \Exception("Table ancestor cannot be found");
		}
		
		$ancestors[] = $parent = $result[0];
		
		// Recursively call the function if needed
		$grandParent = $parent->getParentTableFormat()->getFormat();
		if ($grandParent != "*") {
			$ancestors = array_merge($ancestors, $this->getAncestors($grandParent, $schemaCode));
		}
		
		return $ancestors;
	}

	/**
	 * Get the labels of the children tables of a line of data.
	 *
	 * @param TableFormat $tableFormat
	 *        	the table format we're looking at.
	 * @return Array[String => String] The labels for each table format.
	 */
	function getChildrenTableLabels(TableFormat $tableFormat) {
		$childrenLabels = array();
		/*
		 * // Get the children of the current table
		 * $sql = "SELECT TABLE_TREE.child_table as format, COALESCE(t.label, TABLE_FORMAT.label) as label ";
		 * $sql .= " FROM TABLE_TREE ";
		 * $sql .= " LEFT JOIN TABLE_FORMAT on (TABLE_TREE.child_table = TABLE_FORMAT.format) ";
		 * $sql .= " LEFT JOIN translation t ON (lang = '" . $this->lang . "' AND table_format = 'TABLE_FORMAT' AND row_pk = TABLE_FORMAT.format) ";
		 * $sql .= " WHERE TABLE_TREE.SCHEMA_CODE = :schema";
		 * $sql .= " AND parent_table = :format";
		 */
		$parameters = array(
			'schema' => $tableFormat->getSchemaCode(),
			'format' => $tableFormat->getFormat()
		);
		/*
		 * $select = $this->_em->getConnection()->prepare($sql);
		 * $select->execute($parameters);
		 *
		 * foreach ($select->fetchAll() as $row) {
		 * $format = $row['format'];
		 * $label = $row['label'];
		 *
		 * // Add to the result
		 * $childrenLabels[$format] = $label;
		 * }
		 */
		$dql = "SELECT ct.format AS format, ct.label AS label FROM $this->_entityName t JOIN t.tableFormat ct WHERE t.parentTableFormat = :format AND t.schema = :schema";
		$childrenLabels = $this->_em->createQuery($dql)
			->setParameters($parameters)
			->getScalarResult();
		
		return array_column($childrenLabels, 'label', 'format');
	}
}
