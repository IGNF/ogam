<?php
namespace Ign\Bundle\OGAMBundle\Repository\Metadata;

use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Ign\Bundle\OGAMBundle\Entity\Metadata\FormField;
use Ign\Bundle\OGAMBundle\Entity\Metadata\FormFormat;

/**
 * FormFormatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormFormatRepository extends \Doctrine\ORM\EntityRepository {

	/**
	 * Get the forms used by a dataset.
	 *
	 * @param String $datasetId
	 *        	The identifier of the dataset
	 * @param String $schemaCode
	 *        	The logical name of the schema (RAW_DATA or HARMONIZED_DATA)
	 * @param String $locale
	 *        	The locale
	 * @return Array[Application_Object_Metadata_FormFormat]
	 */
	public function getFormFormats($datasetId, $schemaCode, $locale) {
		$rsm = new ResultSetMappingBuilder($this->_em);
		$rsm->addRootEntityFromClassMetadata(FormFormat::class, 'ffo');
		$param = array();
		
		$sql = " SELECT distinct form_format.format, COALESCE(t.label, form_format.label) as label, COALESCE(t.definition, form_format.definition) as definition, position, is_opened ";
		$sql .= " FROM ( ";
		$sql .= "       SELECT DISTINCT field_mapping.src_format as format ";
		$sql .= "       FROM dataset ";
		$sql .= "       LEFT JOIN dataset_fields USING (dataset_id) ";
		$sql .= "       LEFT JOIN field_mapping ON ( ";
		$sql .= "                      dataset_fields.format = field_mapping.dst_format ";
		$sql .= "                      AND dataset_fields.data = field_mapping.dst_data ";
		$sql .= "                      AND field_mapping.mapping_type = 'FORM') ";
		$sql .= "       WHERE src_format IS NOT NULL";
		$sql .= "       AND schema_code = ?";
		$param[] = $schemaCode;
		
		if (!empty($datasetId)) {
			$sql .= " AND dataset_id = ?";
			$param[] = $datasetId;
		}
		
		$sql .= "      ) as foo ";
		$sql .= "      LEFT JOIN form_format on (form_format.format = foo.format) ";
		$sql .= "      LEFT JOIN translation t ON (lang = ? AND table_format = 'FORM_FORMAT' AND row_pk = form_format.format) ";
		$param[] = $locale;
		
		$sql .= "      ORDER BY position";
		
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query->setParameters($param);
		
		$formFormats = $query->getResult();
		
		// Fill each form with its fields
		foreach ($formFormats as $form) {
			$form->setFields($this->_em->getRepository(FormField::class)
				->getFormFields($datasetId, $form->getFormat(), $schemaCode, $locale));
		}
		
		return $formFormats;
	}
}
