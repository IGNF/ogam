<?php

namespace OGAMBundle\Repository\Metadata;

use Doctrine\ORM\Query\ResultSetMappingBuilder;
use OGAMBundle\Entity\Metadata\Unit;
/**
 * ModeTreeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModeTreeRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Returns the mode(s) corresponding to the code(s).
     *
     * @param Unit $unit The unit
     * @param String|Array $code The filter code(s)
     * @param String $locale The locale
     * @return Mode|[Mode] The filtered mode(s)
     */
    public function getModesFilteredByCode(Unit $unit, $code, $locale){
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata($this->_entityName, 'mt');
        $parameters = array(
            'unit' => $unit->getUnit(),
            'lang' => $locale
        );
        $sql = "SELECT unit, code, COALESCE(t.label, mt.label) as label, COALESCE(t.definition, mt.definition) as definition, position, parent_code, is_leaf";
        $sql .= " FROM mode_tree mt";
        $sql .= " LEFT JOIN translation t ON (lang = :lang AND table_format = 'MODE_TREE' AND row_pk = mt.unit || ',' || mt.code) ";
        $sql .= " WHERE unit = :unit";
        if ($code != null) {
            if (is_array($code)) {
                $sql .= " AND code IN ( :codes )";
                $parameters['codes'] = implode("','", $code);
            } else {
                $sql .= " AND code = :code";
                $parameters['code'] = $code;
            }
        }
        $sql .= " ORDER BY position, code";
        
        $query = $this->_em->createNativeQuery ( $sql, $rsm );
        $query->setParameters ($parameters);
        
        return $query->getResult();
    }

    /**
     * Get all the children codes from a node of a tree.
     *
     * Return an array of codes.
     *
     * @param String $unit
     *        	The unit
     * @param String $code
     *        	The identifier of the start node in the tree (by default the root node is *)
     * @param Integer $levels
     *        	The number of levels of depth (if 0 then no limitation)
     * @param String $locale The locale
     * @return Array[String]
     */
    public function getTreeChildrenCodes($unit, $code = '*', $levels = 1, $locale) {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata($this->_entityName, 'mt');
        
        $sql = "WITH RECURSIVE node_list( code, level) AS ( ";
        $sql .= "	    SELECT code, 1 "; // we get the reference taxon as a base for the search
        $sql .= "		FROM mode_tree mt ";
        $sql .= "		WHERE unit = :unit ";
        $sql .= "		AND code = :code ";
        $sql .= "	UNION ALL ";
        $sql .= "		SELECT child.code, level + 1 ";
        $sql .= "		FROM mode_tree child ";
        $sql .= "		INNER JOIN node_list on (child.parent_code = node_list.code) ";
        $sql .= "		WHERE child.unit = unit ";
        if ($levels != 0) {
            $sql .= " AND level < :levels ";
        }
        $sql .= "	) ";
        $sql .= "	SELECT mt.unit, mt.code, COALESCE(t.label, mt.label) as label, COALESCE(t.definition, mt.definition) as definition, position, parent_code, is_leaf";
        $sql .= "	FROM node_list nl ";
        $sql .= "   LEFT JOIN mode_tree mt ON mt.code = nl.code AND mt.unit = :unit ";
        $sql .= "   LEFT JOIN translation t ON (lang = :lang AND table_format = 'MODE_TREE' AND row_pk = mt.unit || ',' || mt.code) ";
        $sql .= "	ORDER BY level, code "; // level is used to ensure correct construction of the structure
    
        $query = $this->_em->createNativeQuery ( $sql, $rsm );
        $query->setParameters (array(
            'unit' => $unit,
            'code' => $code,
            'lang' => $locale,
            'levels' => $levels
        ));

        return $query->getResult();
    }
    
    /**
     * Get the labels and modes for a tree unit.
     *
     * @param String $unit The unit
     * @param String $value the searched value (optional)
     * @return Array[mode => label]
     */
    public function getTreeLabels($unit, $value = null) {
    
        $req = "SELECT code, COALESCE(t.label, mt.label) as label ";
        $req .= " FROM mode_tree mt";
        $req .= " LEFT JOIN translation t ON (lang = :lang AND table_format = 'MODE_TREE' AND row_pk = mt.unit || ',' || mt.code) ";
        $req .= " WHERE unit = :unit";
        if ($value != null) {
            if (is_array($value)) {
                $req .= " AND code IN ('" . implode("','", $value) . "')";
            } else {
                $req .= " AND code = '" . $value . "'";
            }
        }
        $req .= " ORDER BY position, code";
    
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addIndexByScalar('code')
            ->addScalarResult('label', 'label')
            ->addScalarResult('code','code');
        
        $select = $this->_em->createNativeQuery($req, $rsm);
        $select->setParameters(array(
            'unit' => $unit,
            'lang' => 'fr'
        ));
    
        return array_column($select->getArrayResult(), 'label', 'code');
    }
}
