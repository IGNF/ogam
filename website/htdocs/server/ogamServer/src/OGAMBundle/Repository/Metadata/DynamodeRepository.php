<?php
namespace OGAMBundle\Repository\Metadata;

use OGAMBundle\Entity\Metadata\Unit;
use OGAMBundle\OGAMBundle;
use OGAMBundle\Entity\Metadata\Mode;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * DynamodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DynamodeRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get the unit modes for a dynamic list.
     *
     * @param String $unit The unit
     * @param String $locale The locale
     * @return [OGAMBundle\Entity\Metadata\Mode]
     */
    public function getModes(Unit $unit, $locale)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata('OGAMBundle\Entity\Metadata\Mode', 'm');
        $params = [
            'unit' => $unit->getUnit(),
            'lang' => $locale
        ];

        $sql = "SELECT '". $unit->getUnit() ."' as unit, code, COALESCE(t.label, m.label) as label, COALESCE(t.definition, m.definition) as definition, position ";
        $sql .= " FROM ( ". $unit->getDynamode()->getSql() ." ) as m ";
        $sql .= " LEFT JOIN translation t ON (lang = :lang AND table_format = 'DYNAMODE' AND row_pk = :unit || ',' || m.code) ";

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters($params);

        return $query->getResult();
    }

    /**
     * Returns the mode(s) corresponding to the code(s).
     *
     * @param Unit $unit The unit
     * @param String|Array $code The filter code(s)
     * @param String $locale The locale
     * @return [Mode] The filtered mode(s)
     */
    public function getModesFilteredByCode(Unit $unit, $code, $locale){
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata('OGAMBundle\Entity\Metadata\Mode', 'm');
        $params = [
            $locale,
            $unit->getUnit()
        ];

        $sql = "SELECT '". $unit->getUnit() ."' as unit, code, COALESCE(t.label, m.label) as label, COALESCE(t.definition, m.definition) as definition, position ";
        $sql .= " FROM ( ". $unit->getDynamode()->getSql() ." ) as m ";
        $sql .= " LEFT JOIN translation t ON (lang = ? AND table_format = 'DYNAMODE' AND row_pk = ? || ',' || m.code) ";
        if (is_array($code)) {
            $sql .= ' WHERE code IN ( '.implode(',', array_fill(0, count($code), '?')).' )';
            $params += array_values($code);
        } else {
            $sql .= " WHERE code = ? ";
            $params[] = $code;
        }

        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters($params);

        return $query->getResult();
    }

    /**
     * Returns the mode(s) whose label contains a portion of the search text
     *
     * @param Unit $unit The unit
     * @param String $query The filter query string
     * @param String $locale The locale
     * @return [Mode] The filtered mode(s)
     */
    public function getModesFilteredByLabel(Unit $unit, $query, $locale){
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata('OGAMBundle\Entity\Metadata\Mode', 'm');
        $params = [
            'unit' => $unit->getUnit(),
            'lang' => $locale,
            'query' => $query . '%'
        ];

        $sql = "SELECT '". $unit->getUnit() ."' as unit, code, COALESCE(t.label, m.label) as label, COALESCE(t.definition, m.definition) as definition, position ";
        $sql .= " FROM ( ". $unit->getDynamode()->getSql() ." ) as m ";
        $sql .= " LEFT JOIN translation t ON (lang = :lang AND table_format = 'DYNAMODE' AND row_pk = :unit || ',' || m.code) ";
        $sql .= " WHERE COALESCE(t.label, m.label) ilike :query ";
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters($params);

        return $query->getResult();
    }
}