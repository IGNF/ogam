<?php
namespace OGAMBundle\Repository\Metadata;

use OGAMBundle\Entity\Metadata\Unit;
use OGAMBundle\OGAMBundle;
use OGAMBundle\Entity\Metadata\Mode;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * DynamodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DynamodeRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get the unit modes for a dynamic list.
     *
     * @param String $unit
     *            The unit
     * @param String $code
     *            A code
     * @param String $query
     *            an optional query filter
     * @return [OGAMBundle\Entity\Metadata\Mode]
     */
    public function getModes(Unit $unit, $code = null, $query = null)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $rsm->addRootEntityFromClassMetadata('OGAMBundle\Entity\Metadata\Mode', 'm');
        $params = [];
        
        $sql = "SELECT '" . $unit->getUnit() ."' as unit, * ";
        $sql .= " FROM ( ". $unit->getDynamode()->getSql() ." ) as foo ";
        $sql .= " WHERE (1 = 1)";
        if (! empty($query)) {
            $sql .= " AND label ilike ? ";
            $params[] = $query . '%';
        }
        if ($code != null) {
            if (is_array($code)) {
                $sql .= " AND code IN ( ? )";
                $params[] = implode("','", $code);
            } else {
                $sql .= " AND code = ? ";
                $params[] = $code;
            }
        }
        
        $query = $this->_em->createNativeQuery($sql, $rsm);
        $query->setParameters($params);
        
        return $query->getResult();
    }
}