<?php
namespace OGAMBundle\Repository\Mapping;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\NoResultException;

/**
 * ResultLocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResultLocationRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Clean the previous results
     *
     * @param String $session_id
     *            the session id
     */
    function cleanPreviousResults($session_id)
    {
        $qm = $this->getEntityManager();
        $sql = "DELETE FROM result_location WHERE session_id = ? OR (_creationdt < CURRENT_TIMESTAMP - INTERVAL '2 days')";
        $query = $qm->createNativeQuery($sql, new ResultSetMapping());
        $query->execute(array(
            $session_id
        ));
    }
    
    /**
     * Populate the result location table.
     *
     * @param String $sqlWhere
     *            the FROM / WHERE part of the SQL Request
     * @param String $sessionId
     *            the user session id.
     * @param Application_Object_Metadata_TableField $locationField
     *            the location field.
     * @param Application_Object_Metadata_TableFormat $locationTable
     *            the location table
     * @param String $visualisationSRS
     *            the projection system used for visualisation.
     */
    public function fillLocationResult($sqlWhere, $sessionId, $locationField, $locationTable, $visualisationSRS)
    {
        $qm = $this->getEntityManager();

        if ($sqlWhere != null) {
            $keys = $locationTable->getPrimaryKeys();
            
            $request = " INSERT INTO result_location (session_id, format, pk, the_geom ) ";
            
            // L'identifiant de session de l'utilisateur
            $request .= " SELECT DISTINCT '" . $sessionId . "', ";
            
            // Le nom de la table portant l'info géométrique
            $request .= "'" . $locationTable->getFormat() . "', ";
            
            // Ajout des clés primaires de la table
            $keyColumns = "";
            foreach ($keys as $key) {
                $keyColumns .= $locationTable->getFormat() . "." . $key . " || '__' || ";
            }
            if ($keyColumns != "") {
                $keyColumns = substr($keyColumns, 0, - 11);
            }
            $request .= $keyColumns . ", ";
            
            // Ajout de la colonne portant la géométrie
            $request .= " st_transform(" . $locationTable->getFormat() . "." . $locationField->getColumnName() . "," . $visualisationSRS . ") as the_geom ";
            $request .= $sqlWhere;
            
            $query = $qm->createNativeQuery($request, new ResultSetMapping());
            $query->execute();
        }
    }

    
    /**
     * Returns the bounding box that bounds geometries of results table.
     *
     * @param
     *            String the user session id.
     * @param
     *            String the srs_visualisation
     * @return String the bounging box as WKT (well known text)
     */
    public function getResultsBBox($sessionId, $projection)
    {
        $conn = $this->_em->getConnection();
        $sql = "SELECT st_astext(st_extent(st_transform(the_geom," . $projection . "))) as wkt FROM result_location WHERE session_id = :session_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue("session_id", $sessionId);
        $stmt->execute();
        $bbox = $stmt->fetchColumn();
        if($bbox !== FALSE && $bbox !== ""){
            return $bbox;
        }else {
            throw new NoResultException('No result location found for the current session.');
        }
    }
}
