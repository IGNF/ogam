<?xml version="1.0"?>
<project name="eForest" default="deployWebSite" basedir=".">

    <!-- Properties are immutable: 
    whoever sets a property first freezes it for the rest of the build;
    they are most definitely not variables. -->
	<property file="build.ppts"/>

    <!-- Define the properties -->
    <property name="libraries.dir" value="../../libs_php" />
    <property name="libraries_java.dir" value="../../libs_java" />
    <property name="application.dir" value="./htdocs/application/" />
    <property name="src.dir" value="./htdocs/" />
    <property name="dist.dir" value="${java.io.tmpdir}dist/ogam" />
    <property name="test_result.dir" value="./test_result" />
    
     <!-- You need to checkout on your workspace the libs_java project hosted on the repository for the yuicompressor files -->
    <property name="cps.yui.compressor.jar" value="${libraries_java.dir}/lib/ant/yuicompressor/yuicompressor-2.4.2.jar" />
    <property name="cps.yui.compressor.ant.task.jar" value="${libraries_java.dir}/lib/ant/yuicompressor/yui-compressor-ant-task-0.4.jar" />
       
    
    <!-- Define the properties -->
    <property name="cps.dir" value="${src.dir}public/js/genapp" />
    <property name="cps.src.dir" value="${cps.dir}/source" />
    <property name="cps.resrcs.dir" value="${cps.dir}/resources/css" />
    <property name="cps.name" value="genapp" />
    <property name="cps.js.pack.path" value="${cps.dir}/${cps.name}.pack.js" />
    <property name="cps.css.pack.path" value="${cps.resrcs.dir}/${cps.name}.pack.css" />
    <property name="cps.js.min.path" value="${cps.dir}/${cps.name}.pack-min.js" />
    <property name="cps.css.min.path" value="${cps.resrcs.dir}/${cps.name}.pack-min.css" />

	 <!-- Define the class path for yui-compressor -->
    <path id="cps.task.classpath">
        <pathelement location="${cps.yui.compressor.jar}" />
        <pathelement location="${cps.yui.compressor.ant.task.jar}" />
    </path>

    <!-- yui-compressor task definition -->
    <taskdef 
        name="yui-compressor" 
        classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
        <classpath refid="cps.task.classpath" />
    </taskdef>


    <!-- Test the environment -->
    <target name="targetCheck">
        <condition property="isUnix">
            <and>
                <os family="unix" />
            </and>
        </condition>
        <condition property="isWindows">
            <and>
                <os family="windows" />
            </and>
        </condition>
    </target>

    <!-- Generate the PHP Doc (on unix systems) -->
    <target name="_phpdocunix" depends="targetCheck" if="isUnix">
        <echo>Unix</echo>
        <chmod file="./hudson/phpdoc.sh" perm="ugo+rx" />
        <exec executable="./hudson/phpdoc.sh" dir=".">
            <arg value="&quot;${libraries.dir}/PhpDocumentor/phpDocumentor/phpdoc.inc&quot;" />
        </exec>
    </target>

    <!-- Generate the PHP Doc (on windows systems) -->
    <target name="_phpdocwindows" depends="targetCheck" if="isWindows">
        <echo>Windows</echo>
        <exec executable="./hudson/phpdoc.cmd" dir=".">
            <arg value="${libraries.dir}/PhpDocumentor/phpDocumentor/phpdoc.inc" />
        </exec>
    </target>

    <!-- Generate the PHP Doc -->
    <target name="phpdoc" description="Generate the PHP Doc" depends="_phpdocunix, _phpdocwindows">
    </target>

    <!-- Suppression des répertoires de travail -->
    <target name="clean" description="Removes all the generated files or directories">
        <delete dir="${dist.dir}" />
    </target>
	
    <!-- Concats the css themes files  -->
    <target name="compressCssThemes">
        <!-- Clean up -->
        <delete file="${cps.resrcs.dir}/${cps.name}-gray-extend-all.css" quiet="true"/>
        <delete file="${cps.resrcs.dir}/${cps.name}-green-ifn-all.css" quiet="true"/>

        <!-- Concatenation of the gray extend CSS file -->
        <concat destfile="${cps.resrcs.dir}/${cps.name}-gray-extend-all.css">
            <fileset file="${src.dir}public/js/genapp/resources/css/structure/genapp.css" />
            <fileset file="${src.dir}public/js/genapp/resources/css/visual/genapp-gray-extend.css" />
        </concat>

    	<!-- Concatenation of the green ifn CSS file -->
        <concat destfile="${cps.resrcs.dir}/${cps.name}-green-ifn-all.css">
            <fileset file="${src.dir}public/js/genapp/resources/css/structure/genapp.css" />
            <fileset file="${src.dir}public/js/genapp/resources/css/visual/genapp-green-ifn.css" />
        </concat>
    </target>

	 <!-- Concats and compress the files  -->
	    <target name="compressCssAndJs">
	    	
	    	 <!-- Clean up -->
	        <delete file="${cps.js.pack.path}" quiet="true"/>
	        <delete file="${cps.js.min.path}" quiet="true"/>
	        <delete file="${cps.css.pack.path}" quiet="true"/>
	        <delete file="${cps.css.min.path}" quiet="true"/>

	        <!-- Concatenation of all the JS in one file -->
	        <concat destfile="${cps.js.pack.path}">
	            <fileset dir="${cps.src.dir}" 
	            		 includes="**/*.js" 
	                     excludes="**/locale/*,**/genapp.js"/>
	            <fileset file="${src.dir}public/js/extjsux/basiccheckbox/BasicCheckBox.js" />
	        	<fileset file="${src.dir}public/js/extjsux/datePatch/datePatchExtjs3.1.1.js" />
	        	<fileset file="${src.dir}public/js/extjsux/rowExpander/RowExpander.js" />
	        </concat>

	        <!-- Concatenation of all the CSS in one file -->
	        <concat destfile="${cps.css.pack.path}">
	            <fileset dir="${cps.resrcs.dir}" includes="**/*.css" />
	            <fileset file="${src.dir}public/js/extjsux/basiccheckbox/BasicCheckBox.css" />
	            <fileset file="${src.dir}public/css/extjsux.css" />
	        </concat>

	        <!-- Compress the concatened files on the main directory -->
	        <yui-compressor 
	        	charset="UTF-8" 
	            warn="false" 
	            munge="true"
	            optimize="true"
	            preserveallsemicolons="false" 
	            fromdir="${cps.dir}"
	            todir="${cps.dir}">
	            <include name="resources/css/genapp.pack.css" /> 
	            <include name="genapp.pack.js" />
	        </yui-compressor>
	    </target>

	<!-- Compress OpenLayers -->
    <target name="compressOL" description="Compress the OpenLayers Library"  depends="targetCheck"  if="isWindows">
    	
        <exec executable="cmd"  dir="${src.dir}public/js/OpenLayers/build">
        	<arg line="/c build.cmd"/>
        </exec>
    	
    	 <copy todir="${src.dir}public/js/OpenLayers" 
    	 	overwrite="true" 
    	 	verbose="true"
    	    file="${src.dir}public/js/OpenLayers/build/OpenLayers.js">
    	 </copy>
    </target>
	
	<!-- Compress OpenLayers -->
    <target name="compressMapfish" description="Compress the Mapfish Library"  depends="targetCheck"  if="isWindows">
    	
    	<delete file="${src.dir}public/js/mapfish/build/MapFish.js"/>
    	
        <exec executable="cmd"  dir="${src.dir}public/js/mapfish/build">
        	<arg line="/c build.cmd"/>
        </exec>
    	
    	<copy todir="${src.dir}public/js/mapfish" 
    	 	overwrite="true" 
    	 	verbose="true"
    	    file="${src.dir}public/js/mapfish/build/MapFish.js">
    	 </copy>
    	
    </target>
	

    <!-- Prépare le répertoire à copier pour le site web -->
    <target name="deployWebSite" description="Build the web site" depends="clean, compressCssAndJs">

        <!-- Copie de la structure de l'archive et des fichiers de configuration -->
        <copy todir="${dist.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/logs/**" />
                <exclude name="**/tmp/**" />
                <exclude name="**/upload/**" />
            	<exclude name="**/hudson**" />
                <exclude name="**/application/configs/**" />
                <exclude name="**/.htaccess" />
                <exclude name="**/js/extjs/docs/**" />
                <exclude name="**/js/extjs/examples/**" />
                <exclude name="**/js/extjs/package/**" />
                <exclude name="**/js/extjs/source/**" />       
            	<exclude name="**/js/extjs/src/**" />           
                <exclude name="**/js/mapfish/mapfish/**" />
                <exclude name="**/js/OpenLayers/apidoc_config/**" />
                <exclude name="**/js/OpenLayers/art/**" />
                <exclude name="**/js/OpenLayers/build/**" />
                <exclude name="**/js/OpenLayers/doc/**" />
                <exclude name="**/js/OpenLayers/doc_config/**" />
                <exclude name="**/js/OpenLayers/examples/**" />
                <exclude name="**/js/OpenLayers/lib/**" />
                <exclude name="**/js/OpenLayers/tests/**" />
                <exclude name="**/js/OpenLayers/tools/**" />
            </fileset>        
        </copy>

        <!-- Replace some calls to javascript files with the compressed version -->      
        <copy todir="${dist.dir}" overwrite="true" verbose="true">
            <fileset dir="${src.dir}">
                <include name="**/application/views/scripts/**/*.phtml" />
            </fileset> 
            <filterchain>
                  <replaceregex 
                      pattern="/js/extjs/ext-all-debug.js" 
                      replace="/js/extjs/ext-all.js"/>
            	  <replaceregex 
	                  pattern="/js/OpenLayers/lib/OpenLayers.js" 
	                  replace="/js/OpenLayers/OpenLayers.js"/>
           		  <replaceregex 
        	          pattern="Production mode start" 
        	          replace="Production mode start -->"/>
        		  <replaceregex 
        	          pattern="Debug mode start -->" 
        	          replace="Debug mode start"/>
            	 <replaceregex 
            	       pattern=" Production mode end -->" 
            	       replace="!-- Production mode end -->"/>
        		  <replaceregex 
        		       pattern="!-- Debug mode end -->" 
        		       replace=" Debug mode end -->"/>
        	</filterchain>  
        </copy>

        <echo>Vous pouvez recopier le repertoire "${dist.dir}" sur le serveur PHP</echo>

    </target>
	
	<!-- Launch PHP CheckStyle -->
	<target name="_phpcheckstylewindows" depends="targetCheck" if="isWindows">
		<echo>Windows</echo>
		<exec executable="./hudson/phpcheckstyle.cmd" dir=".">
			<arg value="${libraries.dir}/PhpCheckstyle/run.php" />
		</exec>
	</target>
	
	<!-- Launch PHP CheckStyle -->
	<target name="_phpcheckstyleunix" depends="targetCheck" if="isUnix">
		<echo>Unix</echo>
		<chmod file="./hudson/phpcheckstyle.sh" perm="ugo+rx" />
		<exec executable="./hudson/phpcheckstyle.sh" dir=".">
			<arg value="${libraries.dir}/PhpCheckstyle/run.php" />
		</exec>
	</target>
	
	<!-- Launch PHP CheckStyle-->
	<target name="phpcheckstyle" description="Launch PHP CheckStyle" depends="_phpcheckstylewindows, _phpcheckstyleunix">
	</target>

	
   <!-- Launch jsdoc -->
    <target name="_jsdocwindows" depends="targetCheck" if="isWindows">
        <echo>Windows</echo>
        <exec executable="./hudson/ext-doc.cmd" dir=".">
            <arg value="${libraries_java.dir}/lib/ext-doc/ext-doc.jar" />
            <arg value="${libraries_java.dir}/lib/ext-doc/template/ext/template.xml" />
        </exec>
    </target>
    
    <!-- Launch jsdoc -->
    <target name="_jsdocunix" depends="targetCheck" if="isUnix">
        <echo>Unix</echo>
        <chmod file="./hudson/ext-doc.sh" perm="ugo+rx" />
        <exec executable="./hudson/ext-doc.sh" dir=".">
            <arg value="${libraries_java.dir}/lib/ext-doc/ext-doc.jar" />
            <arg value="${libraries_java.dir}/lib/ext-doc/template/ext/template.xml" />
        </exec>
    </target>
    
    <!-- Launch jsdoc -->
    <target name="jsdoc" description="Launch ext-doc" depends="_jsdocwindows, _jsdocunix">
    </target>
	
	<!-- Génère la documentation du Javascript -->		
	<taskdef name="jsdoctoolkit" classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" classpath="${libraries_java.dir}/lib/jsdoc/jsdoctoolkit-ant-task-1.0.1.jar;${libraries_java.dir}/lib/jsdoc/js.jar"/>
	<target name="javascriptdoc" description="Generate the javascript documentation">
		
			<delete dir="./hudson/docs/genapp/jsdoc" />
	 
			<jsdoctoolkit jsdochome="${libraries_java.dir}/lib/jsdoc/" 
						  template="jsdoc" 
				          outputdir="./hudson/docs/genapp/jsdoc">
				<fileset dir="${cps.dir}">
					<exclude name="**/*.pack*" />
				</fileset>
			</jsdoctoolkit>
	 	
	</target>
   

</project>